name: 🛠 CI Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    name: 🚀 Build & Upload Artifacts
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-southeast-1

    steps:
      # ⬇ Checkout repository
      - name: ⬇ Checkout Code
        uses: actions/checkout@v4

      # ⚙ Setup Node.js
      - name: ⎔ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: ⛅ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: 🌱 Terraform Init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: 📦 Terraform Output
        id: tf_output
        run: |
          terraform output -json > tf_output.json
          echo "artifact_bucket=$(jq -r '.artifact_bucket_name.value' tf_output.json)" >> $GITHUB_OUTPUT
          echo "ci_access_key_id=$(jq -r '.ci_access_key_id.value' tf_output.json)" >> $GITHUB_OUTPUT
          echo "ci_secret_access_key=$(jq -r '.ci_secret_access_key.value' tf_output.json)" >> $GITHUB_OUTPUT
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      # 📥 Install dependencies
      - name: 📦 Install Dependencies
        run: npm ci

      # ✅ Lint, Typecheck, and Test
      - name: 🧪 Biome, Typecheck, and Test
        run: |
          npm run check
          npm run typecheck

      # 🏗 Build Next.js App
      - name: 🏗 Build App
        run: npm run build

      # 📦 Prepare Artifact
      - name: 📦 Package Artifacts
        run: |
          mkdir -p artifact
          cp -r .next/static .next/standalone/.next
          cp -r .next/standalone artifact/

      # ☁ Upload to S3 (versioned by commit SHA)
      - name: ☁ Upload to S3
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --exact-timestamps
        env:
          AWS_S3_BUCKET: ${{ steps.tf_output.outputs.artifact_bucket }}
          AWS_ACCESS_KEY_ID: ${{ steps.tf_output.outputs.ci_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.tf_output.outputs.ci_secret_access_key }}
          AWS_REGION: ${{ env.AWS_REGION }}
          SOURCE_DIR: ./artifact
          DEST_DIR: ${{ github.sha }}

      # 📄 Backup latest.txt to previous.txt (if it exists)
      - name: 📄 Backup latest.txt (if it exists)
        run: |
          set +e
          aws s3 cp s3://${{ steps.tf_output.outputs.artifact_bucket }}/latest.txt ./latest.txt
          if [ -f latest.txt ]; then
            echo "✅ Found latest.txt, backing up to previous.txt"
            aws s3 cp ./latest.txt s3://${{ steps.tf_output.outputs.artifact_bucket }}/previous.txt
          else
            echo "ℹ️ No latest.txt found, skipping backup."
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.tf_output.outputs.ci_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.tf_output.outputs.ci_secret_access_key }}
          AWS_REGION: ${{ env.AWS_REGION }}

      # 📄 Write and Upload latest.txt
      - name: 📄 Upload latest.txt
        run: |
          echo "${{ github.sha }}" > latest.txt
          aws s3 cp latest.txt s3://${{ steps.tf_output.outputs.artifact_bucket }}/latest.txt
          echo "✅ latest.txt now points to ${{ github.sha }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.tf_output.outputs.ci_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.tf_output.outputs.ci_secret_access_key }}
          AWS_REGION: ${{ env.AWS_REGION }}

      # 🧹 Clean previous artifacts
      - name: 🧹 Clean previous artifacts
        run: rm -rf artifact && mkdir artifact
