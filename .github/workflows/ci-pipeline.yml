name: 🛠 CI Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    name: 🚀 Build & Upload Artifacts
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-southeast-1

    steps:
      - name: ⬇ Checkout Code (repository)
        uses: actions/checkout@v4

      - name: ⎔ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: ⛅ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: 🌱 Terraform Init
        run: terraform -chdir=./terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: 📦 Terraform Output
        id: tf_output
        run: |
          terraform -chdir=./terraform output -json > tf_output.json
          echo "api_gateway_url=$(jq -r '.api_gateway_url.value' tf_output.json)" >> $GITHUB_OUTPUT
          echo "artifact_bucket=$(jq -r '.artifact_bucket_name.value' tf_output.json)" >> $GITHUB_OUTPUT
          echo "ci_access_key_id=$(jq -r '.ci_access_key_id.value' tf_output.json)" >> $GITHUB_OUTPUT
          echo "ci_secret_access_key=$(jq -r '.ci_secret_access_key.value' tf_output.json)" >> $GITHUB_OUTPUT
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: ✅ Check Terraform Output
        run: |
          echo "API Gateway URL: ${{ steps.tf_output.outputs.api_gateway_url }}"
          echo "Artifact Bucket: ${{ steps.tf_output.outputs.artifact_bucket }}"

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔍 Lint & Typecheck
        run: |
          npm run lint
          npm run typecheck

      - name: 🧪 Run Unit Tests
        run: npm test -- --verbose

      - name: 🏗 Setup .env
        run: |
          echo "AWS_API_URL=${{ steps.tf_output.outputs.api_gateway_url }}" >> .env

      - name: 🏗 Build Next.js App
        run: npm run build

      - name: 📦 Prepare Package Artifacts
        run: |
          mkdir -p artifact
          cp -r .next/static .next/standalone/.next
          cp -r .next/standalone artifact/

      - name: 📦 Zip Artifacts
        run: |
          zip -r artifact.zip artifact

      - name: ☁ Upload Artifact Zip to S3
        run: |
          aws s3 cp artifact.zip s3://${{ steps.tf_output.outputs.artifact_bucket }}/${{ github.sha }}.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.tf_output.outputs.ci_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.tf_output.outputs.ci_secret_access_key }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: 📄 Backup latest.txt to previous.txt (if it exists)
        run: |
          set +e
          aws s3 cp s3://${{ steps.tf_output.outputs.artifact_bucket }}/latest.txt ./latest.txt
          if [ -f latest.txt ]; then
            echo "✅ Found latest.txt, backing up to previous.txt"
            aws s3 cp ./latest.txt s3://${{ steps.tf_output.outputs.artifact_bucket }}/previous.txt
          else
            echo "ℹ️ No latest.txt found, skipping backup."
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.tf_output.outputs.ci_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.tf_output.outputs.ci_secret_access_key }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: 📄 Write and Upload latest.txt
        run: |
          echo "${{ github.sha }}.zip" > latest.txt
          aws s3 cp latest.txt s3://${{ steps.tf_output.outputs.artifact_bucket }}/latest.txt
          echo "✅ latest.txt now points to ${{ github.sha }}.zip"
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.tf_output.outputs.ci_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.tf_output.outputs.ci_secret_access_key }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: 🧹 Clean Up Old Artifacts in S3
        run: |
          # Download latest.txt and previous.txt (if exists)
          aws s3 cp s3://${{ steps.tf_output.outputs.artifact_bucket }}/latest.txt latest.txt || true
          aws s3 cp s3://${{ steps.tf_output.outputs.artifact_bucket }}/previous.txt previous.txt || true

          # Extract version names
          LATEST=$(cat latest.txt 2>/dev/null || echo "")
          PREVIOUS=$(cat previous.txt 2>/dev/null || echo "")

          echo "Keeping: $LATEST and $PREVIOUS"

          # List all zip files in the bucket
          aws s3 ls s3://${{ steps.tf_output.outputs.artifact_bucket }}/ | awk '{print $4}' | grep '\.zip$' > all_zips.txt

          # Delete zip files that are not latest or previous
          while read ZIPFILE; do
            if [[ "$ZIPFILE" != "$LATEST" && "$ZIPFILE" != "$PREVIOUS" ]]; then
              echo "🗑 Deleting $ZIPFILE"
              aws s3 rm s3://${{ steps.tf_output.outputs.artifact_bucket }}/$ZIPFILE
            else
              echo "✅ Keeping $ZIPFILE"
            fi
          done < all_zips.txt
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.tf_output.outputs.ci_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.tf_output.outputs.ci_secret_access_key }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: 🧹 Clean artifacts and zip
        run: |
          rm -rf artifact artifact.zip
          mkdir artifact
