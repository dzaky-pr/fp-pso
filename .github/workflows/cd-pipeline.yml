name: üöÄ CD Pipeline

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["üõ† CI Pipeline"]
    types:
      - completed

jobs:
  deploy:
    name: üöÄ Deploy to EC2
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-southeast-1

    steps:
      - name: ‚¨á Checkout Code
        uses: actions/checkout@v4

      - name: ‚õÖ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: üå± Setup tfvars
        env:
          KEY_PAIR_NAME: ${{ secrets.KEY_PAIR_NAME }}
          VPC_ID: ${{ secrets.VPC_ID }}
        run: |
          echo "key_pair_name = \"$KEY_PAIR_NAME\"" > terraform/terraform.tfvars
          echo "vpc_id = \"$VPC_ID\"" >> terraform/terraform.tfvars

      - name: üå± Terraform Init
        run: terraform -chdir=./terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: üå± Terraform Apply
        run: terraform -chdir=./terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: üì¶ Terraform Output
        id: tf_output
        run: |
          terraform -chdir=./terraform output -json > tf_output.json
          echo "artifact_bucket=$(jq -r '.artifact_bucket_name.value' tf_output.json)" >> "$GITHUB_OUTPUT"
          echo "cd_access_key_id=$(jq -r '.cd_access_key_id.value' tf_output.json)" >> "$GITHUB_OUTPUT"
          echo "cd_secret_access_key=$(jq -r '.cd_secret_access_key.value' tf_output.json)" >> "$GITHUB_OUTPUT"
          echo "production_public_ip=$(jq -r '.production_public_ip.value' tf_output.json)" >> "$GITHUB_OUTPUT"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: ‚úÖ Check Terraform Output
        run: |
          echo "Artifact Bucket: ${{ steps.tf_output.outputs.artifact_bucket }}"
          echo "Production Public IP: ${{ steps.tf_output.outputs.production_public_ip }}"

      - name: ‚òÅ Download latest.txt
        run: |
          aws s3 cp s3://${{ steps.tf_output.outputs.artifact_bucket }}/latest.txt ./latest.txt
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.tf_output.outputs.cd_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.tf_output.outputs.cd_secret_access_key }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: üì¶ Read version to deploy
        id: version
        run: |
          VERSION=$(cat latest.txt)
          echo "Deploying version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: ‚òÅ Download Artifact by Version
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --exact-timestamps
        env:
          AWS_S3_BUCKET: ${{ steps.tf_output.outputs.artifact_bucket }}
          AWS_ACCESS_KEY_ID: ${{ steps.tf_output.outputs.cd_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.tf_output.outputs.cd_secret_access_key }}
          AWS_REGION: ${{ env.AWS_REGION }}
          SOURCE_DIR: "${{ steps.version.outputs.version }}/"
          DEST_DIR: latest_artifact/

      - name: üñ• Deploy to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ steps.tf_output.outputs.production_public_ip }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "latest_artifact/*"
          target: "~/deploy"

      - name: üîÑ Restart App (optional)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.tf_output.outputs.production_public_ip }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo pm2 restart book-library --interpreter node -- ~/deploy/standalone/server.js
            sudo pm2 save
