name: 🚀 CD Pipeline

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["🛠 CI Pipeline"]
    types:
      - completed

jobs:
  deploy:
    name: 🚀 Deploy to EC2
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-southeast-1

    steps:
      - name: ⬇ Checkout Code
        uses: actions/checkout@v4

      - name: ⛅ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: 🌱 Terraform Init
        run: terraform -chdir=./terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: 📦 Terraform Output
        id: tf_output
        run: |
          terraform -chdir=./terraform output -json > tf_output.json
          echo "api_gateway_url=$(jq -r '.api_gateway_url.value' tf_output.json)" >> "$GITHUB_OUTPUT"
          echo "artifact_bucket=$(jq -r '.artifact_bucket_name.value' tf_output.json)" >> "$GITHUB_OUTPUT"
          echo "cd_access_key_id=$(jq -r '.cd_access_key_id.value' tf_output.json)" >> "$GITHUB_OUTPUT"
          echo "cd_secret_access_key=$(jq -r '.cd_secret_access_key.value' tf_output.json)" >> "$GITHUB_OUTPUT"
          echo "production_public_ip=$(jq -r '.production_public_ip.value' tf_output.json)" >> "$GITHUB_OUTPUT"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: ✅ Check Terraform Output
        run: |
          echo "Artifact Bucket: ${{ steps.tf_output.outputs.artifact_bucket }}"
          echo "Production Public IP: ${{ steps.tf_output.outputs.production_public_ip }}"

      - name: ☁ Download latest.txt
        run: |
          aws s3 cp s3://${{ steps.tf_output.outputs.artifact_bucket }}/latest.txt ./latest.txt
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.tf_output.outputs.cd_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.tf_output.outputs.cd_secret_access_key }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: 📦 Read version to deploy
        id: version
        run: |
          VERSION=$(cat latest.txt)
          echo "Deploying version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 🖥 Deploy to EC2 via SSH Script
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.tf_output.outputs.production_public_ip }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            ARTIFACT_BUCKET="${{ steps.tf_output.outputs.artifact_bucket }}"
            AWS_REGION="${{ env.AWS_REGION }}"
            VERSION="${{ steps.version.outputs.version }}"

            # Clean and prepare deploy folder
            sudo chown -R ubuntu:ubuntu ~/deploy
            rm -rf ~/deploy
            mkdir -p ~/deploy

            # Download the ZIP artifact from S3
            aws s3 cp s3://$ARTIFACT_BUCKET/$VERSION ~/artifact.zip --region $AWS_REGION

            # Unzip it to the deploy folder
            unzip ~/artifact.zip -d ~/deploy

            cd deploy/artifact/standalone
            chmod +rwx server.js
            chmod +rwx package.json

            # Restart PM2 with the new code
            pm2 restart book-library || pm2 start server.js --name book-library
            pm2 save

      - name: 🧪 Run Playwright Smoke Tests (UI, Dark Mode, Search)
        run: |
          echo "Waiting for server to be ready..."
          sleep 15

          # Simpan HTTP status code ke dalam variabel
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.tf_output.outputs.aws_api_url }}/health)

          # Periksa apakah status code bukan 200
          if [ "$STATUS_CODE" -ne 200 ]; then
            echo "Health check failed with status code: $STATUS_CODE"
            exit 1 # Keluar dengan error, step ini akan gagal
          else
            echo "Health check successful with status 200. Proceeding with tests."
          fi

          npm ci
          npx playwright install --with-deps
          npm run smoke
        env:
          SMOKE_UI_URL: http://${{ steps.tf_output.outputs.production_public_ip }}:3000
