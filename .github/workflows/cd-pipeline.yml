name: üöÄ CD Pipeline

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["üõ† CI Pipeline"]
    types:
      - completed

concurrency:
  group: cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: üöÄ Deploy to EC2
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-southeast-1

    steps:
      - name: ‚¨á Checkout Code
        uses: actions/checkout@v4

      - name: ‚õÖ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: üå± Terraform Init
        run: terraform -chdir=./terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: üì¶ Terraform Output
        id: tf_output
        run: |
          terraform -chdir=./terraform output -json > tf_output.json
          echo "api_gateway_url=$(jq -r '.api_gateway_url.value' tf_output.json)" >> "$GITHUB_OUTPUT"
          echo "artifact_bucket=$(jq -r '.artifact_bucket_name.value' tf_output.json)" >> "$GITHUB_OUTPUT"
          echo "cd_access_key_id=$(jq -r '.cd_access_key_id.value' tf_output.json)" >> "$GITHUB_OUTPUT"
          echo "cd_secret_access_key=$(jq -r '.cd_secret_access_key.value' tf_output.json)" >> "$GITHUB_OUTPUT"
          echo "production_public_ip=$(jq -r '.production_public_ip.value' tf_output.json)" >> "$GITHUB_OUTPUT"
          echo "staging_public_ip=$(jq -r '.staging_public_ip.value' tf_output.json)" >> "$GITHUB_OUTPUT"
          echo "production_public_dns=$(jq -r '.production_public_dns.value' tf_output.json)" >> "$GITHUB_OUTPUT"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: ‚úÖ Check Terraform Output
        run: |
          echo "API Gateway URL: ${{ steps.tf_output.outputs.api_gateway_url }}"
          echo "Artifact Bucket: ${{ steps.tf_output.outputs.artifact_bucket }}"
          echo "Production Public IP: ${{ steps.tf_output.outputs.production_public_ip }}"
          echo "Staging Public IP: ${{ steps.tf_output.outputs.staging_public_ip }}"

      - name: ‚òÅ Download latest.txt
        run: |
          aws s3 cp s3://${{ steps.tf_output.outputs.artifact_bucket }}/latest.txt ./latest.txt
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.tf_output.outputs.cd_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.tf_output.outputs.cd_secret_access_key }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: üì¶ Read version to deploy
        id: version
        run: |
          VERSION=$(cat latest.txt)
          echo "Deploying version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: üñ• Deploy Frontend to EC2 Staging
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.tf_output.outputs.staging_public_ip }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            ARTIFACT_BUCKET="${{ steps.tf_output.outputs.artifact_bucket }}"
            AWS_REGION="${{ env.AWS_REGION }}"
            VERSION="${{ steps.version.outputs.version }}"

            echo "üöÄ Starting Next.js Frontend deployment for version: $VERSION"

            # Stop existing PM2 process (if any)
            pm2 stop book-library-frontend || echo "No existing frontend process to stop"
            pm2 delete book-library-frontend || echo "No existing frontend process to delete"

            # Clean and prepare deploy folder
            sudo chown -R ubuntu:ubuntu ~/deploy || true
            sudo chown -R ubuntu:ubuntu ~/artifact.zip || true
            rm -rf ~/deploy ~/artifact.zip
            mkdir -p ~/deploy

            echo "üì¶ Downloading frontend artifact from S3..."
            # Download the ZIP artifact and its checksum from S3
            aws s3 cp s3://$ARTIFACT_BUCKET/$VERSION ~/artifact.zip --region $AWS_REGION
            aws s3 cp s3://$ARTIFACT_BUCKET/${VERSION%.zip}.sha256 ~/artifact.zip.sha256 --region $AWS_REGION

            echo "üîç Validating artifact checksum..."
            # Validate artifact.zip against its checksum
            if sha256sum -c ~/artifact.zip.sha256; then
              echo "‚úÖ Checksum validation passed"
            else
              echo "‚ùå Checksum validation failed"
              exit 1
            fi

            echo "üìÇ Extracting frontend artifact..."
            # Unzip it to the deploy folder
            unzip ~/artifact.zip -d ~/deploy

            echo "üîç Analyzing Next.js deployment structure..."
            find ~/deploy -name "server.js" -o -name "ecosystem.config.js" -o -name "package.json"

            # Navigate to the deploy directory
            cd ~/deploy
            
            # Check if this is a Next.js standalone build
            if [ -f "server.js" ]; then
              echo "‚úÖ Found Next.js server.js"
              
              # Set up environment variables for frontend
              cat > .env.production.local << EOF
NODE_ENV=production
PORT=3000
HOSTNAME=0.0.0.0
AWS_API_URL=${{ steps.tf_output.outputs.api_gateway_url }}
EOF
              echo "‚úÖ Created production environment file"
              
              # Install dependencies if package.json exists (for additional runtime deps)
              if [ -f "package.json" ]; then
                echo "üì¶ Installing production dependencies..."
                npm install --only=production --ignore-scripts 2>/dev/null || echo "‚ö†Ô∏è No additional dependencies needed"
              fi
              
              # Use PM2 ecosystem config if available, otherwise use direct PM2
              if [ -f "ecosystem.config.js" ]; then
                echo "ÔøΩ Starting Next.js app with PM2 ecosystem config..."
                pm2 start ecosystem.config.js
              else
                echo "üöÄ Starting Next.js app with PM2..."
                pm2 start server.js --name "book-library-frontend" -- --port 3000
              fi
              
              # Save PM2 configuration
              pm2 save
              pm2 startup || echo "PM2 startup already configured"
              
              echo "‚úÖ Frontend deployment completed successfully"
              echo "üåê Frontend should be available at: http://${{ steps.tf_output.outputs.staging_public_ip }}:3000"
              
            else
              echo "‚ùå No Next.js server.js found! Available files:"
              find ~/deploy -type f | head -20
              exit 1
            fi

      - name: üß™ Run Playwright Smoke Tests (UI, Dark Mode, Search)
        id: staging_smoke_tests
        continue-on-error: true
        run: |
          echo "‚è≥ Waiting for Next.js frontend to be ready on staging..."
          sleep 15

          # Test frontend availability (Next.js app on port 3000)
          FRONTEND_URL="http://${{ steps.tf_output.outputs.staging_public_ip }}:3000"
          echo "ÔøΩ Testing frontend at: $FRONTEND_URL"
          
          FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $FRONTEND_URL)
          if [ "$FRONTEND_STATUS" -ne 200 ]; then
            echo "‚ùå Frontend health check failed with status code: $FRONTEND_STATUS"
            exit 1
          fi

          # Test backend API availability (Lambda via API Gateway)
          echo "üîç Testing backend API at: ${{ steps.tf_output.outputs.api_gateway_url }}/health"
          API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.tf_output.outputs.api_gateway_url }}/health)
          if [ "$API_STATUS" -ne 200 ]; then
            echo "‚ùå API health check failed with status code: $API_STATUS"
            exit 1
          fi

          echo "‚úÖ Both frontend and backend are healthy, proceeding with smoke tests..."

          npm ci
          npx playwright install --with-deps
          npm run smoke
          else
            echo "Health check successful with status 200. Proceeding with tests."
          fi

          npm ci
          npx playwright install --with-deps
          npm run smoke
        env:
          SMOKE_UI_URL: http://${{ steps.tf_output.outputs.staging_public_ip }}:3000

      - name: üñ• Deploy Frontend to EC2 Production
        if: steps.staging_smoke_tests.outcome == 'success'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.tf_output.outputs.production_public_ip }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            ARTIFACT_BUCKET="${{ steps.tf_output.outputs.artifact_bucket }}"
            AWS_REGION="${{ env.AWS_REGION }}"
            VERSION="${{ steps.version.outputs.version }}"

            echo "üöÄ Starting PRODUCTION Next.js Frontend deployment for version: $VERSION"

            # Stop existing PM2 process (if any)
            pm2 stop book-library-frontend || echo "No existing frontend process to stop"
            pm2 delete book-library-frontend || echo "No existing frontend process to delete"

            # Clean and prepare deploy folder
            sudo chown -R ubuntu:ubuntu ~/deploy || true
            sudo chown -R ubuntu:ubuntu ~/artifact.zip || true
            rm -rf ~/deploy ~/artifact.zip
            mkdir -p ~/deploy

            echo "üì¶ Downloading frontend artifact from S3..."
            # Download the ZIP artifact and its checksum from S3
            aws s3 cp s3://$ARTIFACT_BUCKET/$VERSION ~/artifact.zip --region $AWS_REGION
            aws s3 cp s3://$ARTIFACT_BUCKET/${VERSION%.zip}.sha256 ~/artifact.zip.sha256 --region $AWS_REGION

            echo "üîç Validating artifact checksum..."
            # Validate artifact.zip against its checksum
            if sha256sum -c ~/artifact.zip.sha256; then
              echo "‚úÖ Checksum validation passed"
            else
              echo "‚ùå Checksum validation failed"
              exit 1
            fi

            echo "üìÇ Extracting frontend artifact..."
            # Unzip it to the deploy folder
            unzip ~/artifact.zip -d ~/deploy

            echo "üîç Analyzing Next.js production deployment structure..."
            find ~/deploy -name "server.js" -o -name "ecosystem.config.js" -o -name "package.json"

            # Navigate to the deploy directory
            cd ~/deploy
            
            # Check if this is a Next.js standalone build
            if [ -f "server.js" ]; then
              echo "‚úÖ Found Next.js server.js for production"
              
              # Set up environment variables for production frontend
              cat > .env.production.local << EOF
NODE_ENV=production
PORT=3000
HOSTNAME=0.0.0.0
AWS_API_URL=${{ steps.tf_output.outputs.api_gateway_url }}
EOF
              echo "‚úÖ Created production environment file"
              
              # Install dependencies if package.json exists (for additional runtime deps)
              if [ -f "package.json" ]; then
                echo "üì¶ Installing production dependencies..."
                npm install --only=production --ignore-scripts 2>/dev/null || echo "‚ö†Ô∏è No additional dependencies needed"
              fi
              
              # Use PM2 ecosystem config if available, otherwise use direct PM2
              if [ -f "ecosystem.config.js" ]; then
                echo "üöÄ Starting Production Next.js app with PM2 ecosystem config..."
                pm2 start ecosystem.config.js
              else
                echo "üöÄ Starting Production Next.js app with PM2..."
                pm2 start server.js --name "book-library-frontend" -- --port 3000
              fi
              
              # Save PM2 configuration
              pm2 save
              pm2 startup || echo "PM2 startup already configured"
              
              echo "‚úÖ PRODUCTION frontend deployment completed successfully"
              echo "üåê Production Frontend available at: http://${{ steps.tf_output.outputs.production_public_ip }}:3000"
              
            else
              echo "‚ùå No Next.js server.js found in production artifact! Available files:"
              find ~/deploy -type f | head -20
              exit 1
            fi

      - name: üß™ Run Playwright Smoke Tests on Production (UI, Dark Mode, Search)
        id: production_smoke_tests
        if: steps.staging_smoke_tests.outcome == 'success'
        continue-on-error: true
        run: |
          echo "‚è≥ Waiting for Production Next.js frontend to be ready..."
          sleep 15

          # Test production frontend availability (Next.js app on port 3000)
          PRODUCTION_FRONTEND_URL="http://${{ steps.tf_output.outputs.production_public_ip }}:3000"
          echo "üîç Testing production frontend at: $PRODUCTION_FRONTEND_URL"
          
          FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $PRODUCTION_FRONTEND_URL)
          if [ "$FRONTEND_STATUS" -ne 200 ]; then
            echo "‚ùå Production frontend health check failed with status code: $FRONTEND_STATUS"
            exit 1
          fi

          # Test backend API availability (Lambda via API Gateway)
          echo "üîç Testing backend API at: ${{ steps.tf_output.outputs.api_gateway_url }}/health"
          API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.tf_output.outputs.api_gateway_url }}/health)
          if [ "$API_STATUS" -ne 200 ]; then
            echo "‚ùå API health check failed with status code: $API_STATUS"
            exit 1
          fi

          echo "‚úÖ Both production frontend and backend are healthy, proceeding with smoke tests..."

          npm ci
          npx playwright install --with-deps
          npm run smoke
        env:
          SMOKE_UI_URL: http://${{ steps.tf_output.outputs.production_public_ip }}:3000

      - name: üßæ Add deployment info to summary
        if: steps.production_smoke_tests.outcome == 'success'
        run: |
          echo "### ‚úÖ Deployed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "**Latest commit:** \`$(echo $GITHUB_SHA | cut -c1-7)\`" >> $GITHUB_STEP_SUMMARY
          echo "**Production URL:** [http://${{ steps.tf_output.outputs.production_public_ip }}:3000](http://${{ steps.tf_output.outputs.production_public_ip }}:3000)" >> $GITHUB_STEP_SUMMARY
          echo "**Staging URL:** [http://${{ steps.tf_output.outputs.staging_public_ip }}:3000](http://${{ steps.tf_output.outputs.staging_public_ip }}:3000)" >> $GITHUB_STEP_SUMMARY
          echo "**API Gateway:** [${{ steps.tf_output.outputs.api_gateway_url }}](${{ steps.tf_output.outputs.api_gateway_url }})" >> $GITHUB_STEP_SUMMARY

      - name: üìÑ Rollback to Previous Success Version
        if: steps.staging_smoke_tests.outcome == 'failure'
        run: |
          aws s3 cp s3://${{ steps.tf_output.outputs.artifact_bucket }}/previous.txt previous.txt

          VERSION=$(cat previous.txt)

          if [ -z "$VERSION" ]; then
            echo "::error::Failed to read version from previous.txt. The file might be empty."
            exit 1
          fi

          echo "Rolling back latest.txt to version: $VERSION"
          echo "$VERSION" > latest.txt
          aws s3 cp latest.txt s3://${{ steps.tf_output.outputs.artifact_bucket }}/latest.txt

          echo "‚úÖ Rolled back: latest.txt now points to $VERSION"
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.tf_output.outputs.cd_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.tf_output.outputs.cd_secret_access_key }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: üñ• Stop Deployment in Staging EC2
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.tf_output.outputs.staging_public_ip }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Stop Running pm2 Process  
            pm2 stop book-library-frontend || echo "No frontend process to stop"

            # Clean and prepare deploy folder
            sudo chown -R ubuntu:ubuntu ~/deploy || true
            rm -rf ~/deploy
