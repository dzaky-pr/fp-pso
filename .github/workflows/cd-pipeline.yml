name: üöÄ CD Pipeline

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["üõ† CI Pipeline"]
    types:
      - completed

concurrency:
  group: cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: üöÄ Deploy to EC2
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-southeast-1

    steps:
      - name: ‚¨á Checkout Code
        uses: actions/checkout@v4

      - name: ‚õÖ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: üå± Terraform Init
        run: terraform -chdir=./terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: üì¶ Terraform Output
        id: tf_output
        run: |
          terraform -chdir=./terraform output -json > tf_output.json
          echo "api_gateway_url=$(jq -r '.api_gateway_url.value' tf_output.json)" >> "$GITHUB_OUTPUT"
          echo "artifact_bucket=$(jq -r '.artifact_bucket_name.value' tf_output.json)" >> "$GITHUB_OUTPUT"
          echo "cd_access_key_id=$(jq -r '.cd_access_key_id.value' tf_output.json)" >> "$GITHUB_OUTPUT"
          echo "cd_secret_access_key=$(jq -r '.cd_secret_access_key.value' tf_output.json)" >> "$GITHUB_OUTPUT"
          echo "production_public_ip=$(jq -r '.production_public_ip.value' tf_output.json)" >> "$GITHUB_OUTPUT"
          echo "staging_public_ip=$(jq -r '.staging_public_ip.value' tf_output.json)" >> "$GITHUB_OUTPUT"
          echo "production_public_dns=$(jq -r '.production_public_dns.value' tf_output.json)" >> "$GITHUB_OUTPUT"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: ‚úÖ Check Terraform Output
        run: |
          echo "API Gateway URL: ${{ steps.tf_output.outputs.api_gateway_url }}"
          echo "Artifact Bucket: ${{ steps.tf_output.outputs.artifact_bucket }}"
          echo "Production Public IP: ${{ steps.tf_output.outputs.production_public_ip }}"
          echo "Staging Public IP: ${{ steps.tf_output.outputs.staging_public_ip }}"

      - name: ‚òÅ Download latest.txt
        run: |
          aws s3 cp s3://${{ steps.tf_output.outputs.artifact_bucket }}/latest.txt ./latest.txt
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.tf_output.outputs.cd_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.tf_output.outputs.cd_secret_access_key }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: üì¶ Read version to deploy
        id: version
        run: |
          VERSION=$(cat latest.txt)
          echo "Deploying version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: üñ• Deploy to EC2 Staging via SSH Script
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.tf_output.outputs.staging_public_ip }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            ARTIFACT_BUCKET="${{ steps.tf_output.outputs.artifact_bucket }}"
            AWS_REGION="${{ env.AWS_REGION }}"
            VERSION="${{ steps.version.outputs.version }}"

            echo "üöÄ Starting deployment for version: $VERSION"

            # Stop existing PM2 process (if any)
            pm2 stop book-library || echo "No existing process to stop"
            pm2 delete book-library || echo "No existing process to delete"

            # Clean and prepare deploy folder
            sudo chown -R ubuntu:ubuntu ~/deploy || true
            sudo chown -R ubuntu:ubuntu ~/artifact.zip || true
            rm -rf ~/deploy
            rm -rf ~/artifact.zip
            mkdir -p ~/deploy

            echo "üì¶ Downloading artifact from S3..."
            # Download the ZIP artifact and its checksum from S3
            aws s3 cp s3://$ARTIFACT_BUCKET/$VERSION ~/artifact.zip --region $AWS_REGION
            aws s3 cp s3://$ARTIFACT_BUCKET/${VERSION%.zip}.sha256 ~/artifact.zip.sha256 --region $AWS_REGION

            echo "üîç Validating artifact checksum..."
            # Validate artifact.zip against its checksum
            if sha256sum -c ~/artifact.zip.sha256; then
              echo "‚úÖ Checksum validation passed"
            else
              echo "‚ùå Checksum validation failed"
              exit 1
            fi

            echo "üìÇ Extracting artifact..."
            # Unzip it to the deploy folder
            unzip ~/artifact.zip -d ~/deploy

            echo "üîç Analyzing deployment structure..."
            # Find the actual app structure
            find ~/deploy -name "*.js" -o -name "package.json" | head -10

            # Navigate to the correct directory - should be ~/deploy/artifact/
            if [ -f "/home/ubuntu/deploy/artifact/server.js" ]; then
              APP_PATH="/home/ubuntu/deploy/artifact"
              SERVER_FILE="server.js"
            elif [ -f "/home/ubuntu/deploy/server.js" ]; then
              APP_PATH="/home/ubuntu/deploy"
              SERVER_FILE="server.js"
            else
              echo "‚ùå No server.js found! Available files:"
              find /home/ubuntu/deploy -type f -name "*.js" | head -20
              exit 1
            fi

            echo "üéØ Using app path: $APP_PATH"
            echo "üéØ Using server file: $SERVER_FILE"

            # Navigate to app directory
            cd $APP_PATH

            # Install dependencies if package.json exists
            if [ -f "package.json" ]; then
              echo "üì¶ Installing dependencies..."
              # Add swap space for low-memory instances
              sudo fallocate -l 1G /swapfile || true
              sudo chmod 600 /swapfile || true
              sudo mkswap /swapfile || true
              sudo swapon /swapfile || true
              
              npm install --production
              echo "üì¶ Dependencies installed successfully"
              
              # Clean up swap
              sudo swapoff /swapfile || true
              sudo rm /swapfile || true
            else
              echo "‚ö†Ô∏è No package.json found, skipping dependency installation"
            fi

            # Set proper permissions
            chmod +x $SERVER_FILE
            chmod +r package.json || true

            # Set environment variables
            export NODE_ENV=staging
            export PORT=3000

            echo "üöÄ Starting application with PM2..."
            # Start with PM2
            pm2 start $SERVER_FILE --name book-library --env staging
            pm2 save

            echo "üìä PM2 Status:"
            pm2 status

            echo "üìù Application logs:"
            pm2 logs book-library --lines 5 --nostream || echo "No logs available yet"

            echo "‚úÖ Staging deployment completed successfully"

      - name: üß™ Run Playwright Smoke Tests (UI, Dark Mode, Search)
        id: staging_smoke_tests
        continue-on-error: true
        run: |
          echo "Waiting for server to be ready..."
          sleep 15

          # exit 1

          # Simpan HTTP status code ke dalam variabel
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.tf_output.outputs.api_gateway_url }}/health)

          # Periksa apakah status code bukan 200
          if [ "$STATUS_CODE" -ne 200 ]; then
            echo "Health check failed with status code: $STATUS_CODE"
            exit 1 # Keluar dengan error, step ini akan gagal
          else
            echo "Health check successful with status 200. Proceeding with tests."
          fi

          npm ci
          npx playwright install --with-deps
          npm run smoke
        env:
          SMOKE_UI_URL: http://${{ steps.tf_output.outputs.staging_public_ip }}:3000

      - name: üñ• Deploy to EC2 Production via SSH Script
        if: steps.staging_smoke_tests.outcome == 'success'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.tf_output.outputs.production_public_ip }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            ARTIFACT_BUCKET="${{ steps.tf_output.outputs.artifact_bucket }}"
            AWS_REGION="${{ env.AWS_REGION }}"
            VERSION="${{ steps.version.outputs.version }}"

            echo "üöÄ Starting PRODUCTION deployment for version: $VERSION"

            # Stop existing PM2 process (if any)
            pm2 stop book-library || echo "No existing process to stop"
            pm2 delete book-library || echo "No existing process to delete"

            # Clean and prepare deploy folder
            sudo chown -R ubuntu:ubuntu ~/deploy || true
            sudo chown -R ubuntu:ubuntu ~/artifact.zip || true
            rm -rf ~/deploy
            rm -rf ~/artifact.zip
            mkdir -p ~/deploy

            echo "üì¶ Downloading artifact from S3..."
            # Download the ZIP artifact and its checksum from S3
            aws s3 cp s3://$ARTIFACT_BUCKET/$VERSION ~/artifact.zip --region $AWS_REGION
            aws s3 cp s3://$ARTIFACT_BUCKET/${VERSION%.zip}.sha256 ~/artifact.zip.sha256 --region $AWS_REGION

            echo "üîç Validating artifact checksum..."
            # Validate artifact.zip against its checksum
            if sha256sum -c ~/artifact.zip.sha256; then
              echo "‚úÖ Checksum validation passed"
            else
              echo "‚ùå Checksum validation failed"
              exit 1
            fi

            echo "üìÇ Extracting artifact..."
            # Unzip it to the deploy folder
            unzip ~/artifact.zip -d ~/deploy

            echo "üîç Analyzing deployment structure..."
            # Find the actual app structure
            find ~/deploy -name "*.js" -o -name "package.json" | head -10

            # Navigate to the correct directory - should be ~/deploy/artifact/
            if [ -f "/home/ubuntu/deploy/artifact/server.js" ]; then
              APP_PATH="/home/ubuntu/deploy/artifact"
              SERVER_FILE="server.js"
            elif [ -f "/home/ubuntu/deploy/server.js" ]; then
              APP_PATH="/home/ubuntu/deploy"
              SERVER_FILE="server.js"
            else
              echo "‚ùå No server.js found! Available files:"
              find /home/ubuntu/deploy -type f -name "*.js" | head -20
              exit 1
            fi

            echo "üéØ Using app path: $APP_PATH"
            echo "üéØ Using server file: $SERVER_FILE"

            # Navigate to app directory
            cd $APP_PATH

            # Install dependencies if package.json exists
            if [ -f "package.json" ]; then
              echo "üì¶ Installing dependencies..."
              # Add swap space for low-memory instances
              sudo fallocate -l 1G /swapfile || true
              sudo chmod 600 /swapfile || true
              sudo mkswap /swapfile || true
              sudo swapon /swapfile || true
              
              npm install --production
              echo "üì¶ Dependencies installed successfully"
              
              # Clean up swap
              sudo swapoff /swapfile || true
              sudo rm /swapfile || true
            else
              echo "‚ö†Ô∏è No package.json found, skipping dependency installation"
            fi

            # Set proper permissions
            chmod +x $SERVER_FILE
            chmod +r package.json || true

            # Set environment variables for production
            export NODE_ENV=production
            export PORT=3000

            echo "üöÄ Starting application with PM2..."
            # Start with PM2
            pm2 start $SERVER_FILE --name book-library --env production
            pm2 save

            echo "üìä PM2 Status:"
            pm2 status

            echo "üìù Application logs:"
            pm2 logs book-library --lines 5 --nostream || echo "No logs available yet"

            echo "‚úÖ Production deployment completed successfully"

      - name: üß™ Run Playwright Smoke Tests (UI, Dark Mode, Search)
        id: production_smoke_tests
        if: steps.staging_smoke_tests.outcome == 'success'
        continue-on-error: true
        run: |
          echo "Waiting for server to be ready..."
          sleep 15

          # Simpan HTTP status code ke dalam variabel
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.tf_output.outputs.api_gateway_url }}/health)

          # Periksa apakah status code bukan 200
          if [ "$STATUS_CODE" -ne 200 ]; then
            echo "Health check failed with status code: $STATUS_CODE"
            exit 1 # Keluar dengan error, step ini akan gagal
          else
            echo "Health check successful with status 200. Proceeding with tests."
          fi

          npm ci
          npx playwright install --with-deps
          npm run smoke
        env:
          SMOKE_UI_URL: http://${{ steps.tf_output.outputs.production_public_ip }}:3000

      - name: üßæ Add deployment info to summary
        if: steps.production_smoke_tests.outcome == 'success'
        run: |
          echo "### ‚úÖ Deployed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "**Latest commit:** \`$(echo $GITHUB_SHA | cut -c1-7)\`" >> $GITHUB_STEP_SUMMARY
          echo "**Production URL:** [http://${{ steps.tf_output.outputs.production_public_ip }}:3000](http://${{ steps.tf_output.outputs.production_public_ip }}:3000)" >> $GITHUB_STEP_SUMMARY
          echo "**Staging URL:** [http://${{ steps.tf_output.outputs.staging_public_ip }}:3000](http://${{ steps.tf_output.outputs.staging_public_ip }}:3000)" >> $GITHUB_STEP_SUMMARY
          echo "**API Gateway:** [${{ steps.tf_output.outputs.api_gateway_url }}](${{ steps.tf_output.outputs.api_gateway_url }})" >> $GITHUB_STEP_SUMMARY

      - name: üìÑ Rollback to Previous Success Version
        if: steps.staging_smoke_tests.outcome == 'failure'
        run: |
          aws s3 cp s3://${{ steps.tf_output.outputs.artifact_bucket }}/previous.txt previous.txt

          VERSION=$(cat previous.txt)

          if [ -z "$VERSION" ]; then
            echo "::error::Failed to read version from previous.txt. The file might be empty."
            exit 1
          fi

          echo "Rolling back latest.txt to version: $VERSION"
          echo "$VERSION" > latest.txt
          aws s3 cp latest.txt s3://${{ steps.tf_output.outputs.artifact_bucket }}/latest.txt

          echo "‚úÖ Rolled back: latest.txt now points to $VERSION"
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.tf_output.outputs.cd_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.tf_output.outputs.cd_secret_access_key }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: üñ• Stop Deployment in Staging EC2
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.tf_output.outputs.staging_public_ip }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Stop Running pm2 Process
            pm2 stop book-library

            # Clean and prepare deploy folder
            sudo chown -R ubuntu:ubuntu ~/deploy
            rm -rf ~/deploy
